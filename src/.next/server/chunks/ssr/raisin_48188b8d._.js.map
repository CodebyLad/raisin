{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/hedgehog/raisin/src/lib/voice.ts"],"sourcesContent":["export async function startRecording(callback: (audioBlob: Blob) => void) {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  const mediaRecorder = new MediaRecorder(stream);\n  const chunks: BlobPart[] = [];\n\n  mediaRecorder.ondataavailable = (e) => chunks.push(e.data);\n  mediaRecorder.onstop = () => {\n    const blob = new Blob(chunks, { type: \"audio/wav\" });\n    callback(blob);\n  };\n  mediaRecorder.start();\n  return mediaRecorder;\n}\n\nexport async function sendAudioToAgent(dataChannel: RTCDataChannel, audio: Blob) {\n  try {\n    console.log(\"Sending audio to agent...\", dataChannel, audio);\n    \n    if (!dataChannel || dataChannel.readyState !== 'open') {\n      throw new Error(\"Data channel not available or not open\");\n    }\n\n    // Convert blob to ArrayBuffer\n    const arrayBuffer = await audio.arrayBuffer();\n    \n    // Convert to base64 for transmission\n    const base64Audio = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\n    \n    // Send audio to OpenAI Realtime API via data channel\n    const audioEvent = {\n      type: 'input_audio_buffer.append',\n      audio: base64Audio\n    };\n    \n    dataChannel.send(JSON.stringify(audioEvent));\n    console.log(\"Audio sent successfully via data channel\");\n    return { success: true };\n  } catch (error) {\n    console.error(\"Error sending audio to agent:\", error);\n    return { success: false, error: error.message };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAO,eAAe,eAAe,QAAmC;IACtE,MAAM,SAAS,MAAM,UAAU,YAAY,CAAC,YAAY,CAAC;QAAE,OAAO;IAAK;IACvE,MAAM,gBAAgB,IAAI,cAAc;IACxC,MAAM,SAAqB,EAAE;IAE7B,cAAc,eAAe,GAAG,CAAC,IAAM,OAAO,IAAI,CAAC,EAAE,IAAI;IACzD,cAAc,MAAM,GAAG;QACrB,MAAM,OAAO,IAAI,KAAK,QAAQ;YAAE,MAAM;QAAY;QAClD,SAAS;IACX;IACA,cAAc,KAAK;IACnB,OAAO;AACT;AAEO,eAAe,iBAAiB,WAA2B,EAAE,KAAW;IAC7E,IAAI;QACF,QAAQ,GAAG,CAAC,6BAA6B,aAAa;QAEtD,IAAI,CAAC,eAAe,YAAY,UAAU,KAAK,QAAQ;YACrD,MAAM,IAAI,MAAM;QAClB;QAEA,8BAA8B;QAC9B,MAAM,cAAc,MAAM,MAAM,WAAW;QAE3C,qCAAqC;QACrC,MAAM,cAAc,KAAK,OAAO,YAAY,IAAI,IAAI,WAAW;QAE/D,qDAAqD;QACrD,MAAM,aAAa;YACjB,MAAM;YACN,OAAO;QACT;QAEA,YAAY,IAAI,CAAC,KAAK,SAAS,CAAC;QAChC,QAAQ,GAAG,CAAC;QACZ,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC;IAChD;AACF","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///Users/hedgehog/raisin/src/app/agent/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { startRecording, sendAudioToAgent } from '../../lib/voice';\n\nexport default function AgentPage() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [agentResponses, setAgentResponses] = useState<string[]>([]);\n  const responseRef = useRef<HTMLDivElement | null>(null);\n  const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\n  const dataChannelRef = useRef<RTCDataChannel | null>(null);\n  const audioElementRef = useRef<HTMLAudioElement | null>(null);\n\n  useEffect(() => {\n    let mounted = true;\n    console.log('[AgentPage] mount - initializing agent');\n\n    const initializeAgent = async () => {\n      try {\n        console.log('[AgentPage] fetching ephemeral token from /api/openai/token');\n        const resp = await fetch('/api/openai/token');\n        console.log('[AgentPage] token response status', resp.status);\n        const json = await resp.json().catch((e) => {\n          console.error('[AgentPage] failed parsing token JSON', e);\n          return null;\n        });\n        console.log('[AgentPage] token response JSON', json);\n        const ephemeralToken = json?.value;\n        if (!ephemeralToken) {\n          console.error('[AgentPage] no ephemeral token received');\n          return;\n        }\n        console.log('[AgentPage] ephemeral token received (length)', ephemeralToken.length);\n\n        // Create WebRTC peer connection\n        const peerConnection = new RTCPeerConnection();\n        peerConnectionRef.current = peerConnection;\n\n        // Create audio element for playing AI responses\n        const audioElement = document.createElement('audio');\n        audioElement.autoplay = true;\n        audioElementRef.current = audioElement;\n        document.body.appendChild(audioElement);\n\n        // Handle incoming audio tracks from OpenAI\n        peerConnection.ontrack = (event) => {\n          console.log('[AgentPage] received audio track from OpenAI');\n          if (audioElementRef.current) {\n            audioElementRef.current.srcObject = event.streams[0];\n          }\n        };\n\n        // Create data channel for sending messages to OpenAI\n        const dataChannel = peerConnection.createDataChannel('oai-events');\n        dataChannelRef.current = dataChannel;\n\n        dataChannel.addEventListener('open', () => {\n          console.log('[AgentPage] data channel opened');\n          setIsConnected(true);\n          \n          // Send session update with instructions\n          const sessionUpdate = {\n            type: 'session.update',\n            session: {\n              instructions: 'You are a helpful assistant named Raisin. Be friendly and conversational.',\n              voice: 'alloy',\n              input_audio_format: 'pcm16',\n              output_audio_format: 'pcm16',\n              turn_detection: {\n                type: 'server_vad'\n              }\n            }\n          };\n          dataChannel.send(JSON.stringify(sessionUpdate));\n        });\n\n        dataChannel.addEventListener('message', (event) => {\n          try {\n            const response = JSON.parse(event.data);\n            console.log('[AgentPage] received message from OpenAI:', response);\n            \n            // Handle different types of responses\n            if (response.type === 'response.audio_transcript.delta' && response.delta) {\n              setAgentResponses(prev => [...prev, response.delta]);\n            } else if (response.type === 'response.audio_transcript.done' && response.text) {\n              setAgentResponses(prev => [...prev, response.text]);\n            } else if (response.type === 'response.text.delta' && response.delta) {\n              setAgentResponses(prev => [...prev, response.delta]);\n            } else if (response.type === 'response.text.done' && response.text) {\n              setAgentResponses(prev => [...prev, response.text]);\n            }\n          } catch (error) {\n            console.error('[AgentPage] error parsing message:', error);\n          }\n        });\n\n        // Get user media for microphone input\n        const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const audioTrack = mediaStream.getAudioTracks()[0];\n        peerConnection.addTrack(audioTrack);\n\n        // Create offer and establish connection\n        const offer = await peerConnection.createOffer();\n        await peerConnection.setLocalDescription(offer);\n\n        // Send offer to OpenAI\n        const sdpResponse = await fetch('https://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-12-17', {\n          method: 'POST',\n          body: offer.sdp,\n          headers: {\n            'Authorization': `Bearer ${ephemeralToken}`,\n            'Content-Type': 'application/sdp',\n          },\n        });\n\n        if (!sdpResponse.ok) {\n          throw new Error(`Failed to connect to OpenAI: ${sdpResponse.status}`);\n        }\n\n        // Set remote description with OpenAI's answer\n        const answer = {\n          type: 'answer',\n          sdp: await sdpResponse.text()\n        };\n        await peerConnection.setRemoteDescription(answer);\n\n        console.log('[AgentPage] WebRTC connection established with OpenAI');\n      } catch (err) {\n        console.error('[AgentPage] initializeAgent error', err);\n      }\n    };\n\n    initializeAgent();\n\n    return () => {\n      console.log('[AgentPage] cleanup - closing connections');\n      if (dataChannelRef.current) {\n        dataChannelRef.current.close();\n      }\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n      }\n      if (audioElementRef.current) {\n        audioElementRef.current.remove();\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    console.log('[AgentPage] agentResponses changed, count =', agentResponses.length);\n    if (responseRef.current) {\n      responseRef.current.scrollTop = responseRef.current.scrollHeight;\n    }\n  }, [agentResponses]);\n\n  const handleRecord = async () => {\n    console.log('[AgentPage] handleRecord called, isConnected=', isConnected);\n    if (!isConnected || !dataChannelRef.current) {\n      console.warn('[AgentPage] not connected to OpenAI yet');\n      return;\n    }\n    setIsRecording(true);\n\n    try {\n      const recorder = await startRecording(async (audioBlob: Blob) => {\n        try {\n          console.log('[AgentPage] recorded audio blob, size:', audioBlob.size);\n          const result = await sendAudioToAgent(dataChannelRef.current!, audioBlob);\n          console.log('[AgentPage] sendAudioToAgent result', result);\n        } catch (e) {\n          console.error('[AgentPage] error sending audio to agent', e);\n        } finally {\n          setIsRecording(false);\n        }\n      });\n\n      // Stop automatically after 5 seconds\n      setTimeout(() => {\n        try {\n          recorder.stop();\n          console.log('[AgentPage] recorder.stop() called');\n        } catch (e) {\n          console.error('[AgentPage] recorder.stop() error', e);\n        }\n      }, 5000);\n    } catch (e) {\n      console.error('[AgentPage] startRecording error', e);\n      setIsRecording(false);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        minHeight: '100vh',\n        background: '#f5f5f5',\n        fontFamily: \"'Nunito Sans', sans-serif\",\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: '2rem',\n      }}\n    >\n      <div\n        style={{\n          width: '420px',\n          background: '#fff',\n          borderRadius: '12px',\n          boxShadow: '0 8px 24px rgba(0,0,0,0.08)',\n          overflow: 'hidden',\n        }}\n      >\n        <div style={{ padding: '1rem', background: '#0f172a', color: '#fff', fontWeight: 700 }}>\n          Raisin — realtime debug\n        </div>\n\n        <div\n          ref={responseRef}\n          style={{ maxHeight: 320, overflowY: 'auto', padding: '1rem', borderBottom: '1px solid #eee' }}\n        >\n          {agentResponses.length === 0 ? (\n            <p style={{ color: '#666' }}>\n              {isConnected ? 'Connected! Click \"Talk\" to start a conversation.' : 'Connecting to OpenAI...'}\n            </p>\n          ) : (\n            agentResponses.map((r, i) => (\n              <div key={i} style={{ background: '#f7fafc', margin: '8px 0', padding: '10px', borderRadius: 8 }}>\n                {r}\n              </div>\n            ))\n          )}\n        </div>\n\n        <div style={{ padding: '1rem', display: 'flex', justifyContent: 'center' }}>\n          <button\n            onClick={handleRecord}\n            disabled={isRecording || !isConnected}\n            style={{\n              padding: '10px 18px',\n              borderRadius: 8,\n              background: isRecording ? '#9ca3af' : isConnected ? '#0f172a' : '#6b7280',\n              color: '#fff',\n              border: 'none',\n              cursor: isRecording || !isConnected ? 'not-allowed' : 'pointer',\n            }}\n          >\n            {isRecording ? 'Recording…' : isConnected ? 'Talk (5s)' : 'Connecting…'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///Users/hedgehog/raisin/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":"AAAAA,OAAOC,OAAO,GACZC,QAAQ,mIACRC,QAAQ,CAAC,YAAY,CAAEC,kBAAkB","ignoreList":[0],"debugId":null}}]
}